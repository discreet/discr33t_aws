require 'aws-sdk'

dynamodb_client = Aws::DynamoDB::Client.new(
  access_key_id: '<%= @aws_access_key %>',
  secret_access_key: '<%= @aws_secret_key %>',
  region: '<%= @aws_region %>'
)

kms_client = Aws::KMS::Client.new(
  access_key_id: '<%= @aws_access_key %>',
  secret_access_key: '<%= @aws_secret_key %>',
  region: '<%= @aws_region %>'
)
dynamo_tables = <%= @dynamo_tables %>

tables = dynamodb_client.list_tables ()

dynamo_tables.each do |dynamo_table|
  unless tables.table_names.include?(dynamo_table)
    dynamodb_client.create_table(
      {
        attribute_definitions:
          [
            {
	      attribute_name: 'KeySchemaAttributeName',
	      attribute_type: 'S',
	    },
          ],
        table_name: dynamo_table,
        key_schema: [
          {
	    attribute_name: 'KeySchemaAttributeName',
            key_type: 'HASH',
          },
        ],
        provisioned_throughput: {
          read_capacity_units: 1,
          write_capacity_units: 1,
        },
      }
    )
    dynamodb_client.wait_until(:table_exists, table_name: dynamo_table)

    table_arn = dynamodb_client.describe_table(
      {
        table_name: dynamo_table,
      }
    )
  end
end

kms_data = <%= @kms_keys %>
keys = kms_client.list_aliases()

key_list = []
keys.aliases.each do |key|
  key_list << key.alias_name
end

kms_data.each do |k,v|
  unless key_list.include?("alias/#{k}")
    key_id = v['key_id']
    key_iam = v['key_iam']
    kms_create = kms_client.create_key(
      {
	policy: %Q~{
          "Id": "#{key_id}",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::949402414914:root"
                ]
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow access for Key Administrators",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
	          "#{key_iam}"
                ]
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
	          "#{key_iam}"
                ]
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow attachment of persistent resources",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
	          "#{key_iam}"
                ]
              },
              "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RevokeGrant"
              ],
              "Resource": "*",
              "Condition": {
                "Bool": {
                  "kms:GrantIsForAWSResource": true
                }
              }
            }
          ]
	}~,
      description: v['key_descr'],
      key_usage: 'ENCRYPT_DECRYPT',
      origin: 'AWS_KMS'
    }
  )

  key_arn = kms_create.key_metadata.arn

  kms_client.create_alias (
    {
      alias_name: "alias/#{v['key_alias']}",
      target_key_id: key_arn
    }
  )
  end
end
